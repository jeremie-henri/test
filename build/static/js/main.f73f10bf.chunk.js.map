{"version":3,"sources":["stores/UserStore.js","InputField.js","LoginForm.js","Square.js","Board.js","ChatInput.js","ChatMessage.js","Chat.js","App.js","serviceWorker.js","index.js"],"names":["extendObservable","this","loading","isLoggedIn","username","InputField","className","type","props","placeholder","value","onChange","e","target","React","Component","LoginForm","state","password","buttonDisabled","property","val","trim","length","setState","fetch","method","headers","body","JSON","stringify","res","json","result","success","UserStore","resetForm","alert","msg","console","log","setInputValue","onClick","doLogin","doRegister","Square","color_","color","handleClick","style","backgroundColor","borderRadius","borderColor","height","Board","Array","fill","map","x","bind","ResetGrid","newGrid","y","grid","g","checkDir","x_","y_","tracked","_x","_y","undefined","isWhite","w_horizontal","b_horizontal","w_vertical","b_vertical","w_diag1","b_diag1","w_diag2","b_diag2","setTimeout","board","row","i","key","col","j","cellSpacing","ChatInput","message","action","onSubmit","preventDefault","onSubmitMessage","name","URL","Chat","messages","ws","WebSocket","addMessage","submitMessage","messageString","send","onopen","onmessage","evt","parse","data","onclose","htmlFor","index","ChatMessage","App","doLogout","observer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.f73f10bf.chunk.js","sourcesContent":["import { extendObservable } from 'mobx';\r\n\r\n/**\r\n * UserStore\r\n */\r\n\r\nclass UserStore{\r\n    constructor() {\r\n        extendObservable(this, {\r\n            loading: true,\r\n            isLoggedIn: false,\r\n            username: ''\r\n        })\r\n    }\r\n}\r\n\r\nexport default new UserStore();","import React from 'react';\r\n\r\nclass InputField extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"inputField\">\r\n                <input\r\n                    className='input'\r\n                    type={this.props.type}\r\n                    placeholder={this.props.placeholder}\r\n                    value={this.props.value}\r\n                    onChange={ (e) => this.props.onChange(e.target.value) }\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default InputField;\r\n","import React from 'react';\r\nimport InputField from \"./InputField\";\r\nimport UserStore from \"./stores/UserStore\";\r\n\r\nclass LoginForm extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: '',\r\n            password: '',\r\n            buttonDisabled: false\r\n        }\r\n    }\r\n\r\n    setInputValue(property, val){\r\n        val = val.trim();\r\n        if (val.length > 12) {\r\n            return;\r\n        }\r\n        this.setState({\r\n           [property]: val\r\n        })\r\n    }\r\n\r\n    resetForm(){\r\n        this.setState({\r\n            username: '',\r\n            password: '',\r\n            buttonDisabled: false\r\n        });\r\n    }\r\n\r\n    async doLogin() {\r\n\r\n\r\n        if(!this.state.username) {\r\n            return;\r\n        }\r\n        if (!this.state.password){\r\n            return;\r\n        }\r\n        this.setState({\r\n            buttonDisabled: false\r\n        })\r\n\r\n        try{\r\n            let res = await fetch('/login', {\r\n                method: 'post',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    username: this.state.username,\r\n                    password: this.state.password\r\n                })\r\n            });\r\n            let result = await res.json();\r\n            if (result && result.success){\r\n                UserStore.isLoggedIn = true;\r\n                UserStore.username = result.username;\r\n            }\r\n            else if (result && result.success === false){\r\n                this.resetForm();\r\n                alert(result.msg);\r\n            }\r\n        }\r\n        catch (e) {\r\n            this.resetForm();\r\n        }\r\n\r\n    }\r\n\r\n    async doRegister() {\r\n\r\n\r\n        if(!this.state.username) {\r\n            return;\r\n        }\r\n        if (!this.state.password){\r\n            return;\r\n        }\r\n        this.setState({\r\n            buttonDisabled: false\r\n        })\r\n\r\n        try{\r\n            let res = await fetch('/register', {\r\n                method: 'post',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    username: this.state.username,\r\n                    password: this.state.password\r\n                })\r\n            });\r\n            let result = await res.json();\r\n            if (result && result.success){\r\n                UserStore.isLoggedIn = true;\r\n                UserStore.username = result.username;\r\n            }\r\n            else if (result && result.success === false){\r\n                this.resetForm();\r\n                alert(result.msg);\r\n            }\r\n        }\r\n        catch (e) {\r\n            console.log(e);\r\n            this.resetForm();\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"loginForm\">\r\n                Log in\r\n                <InputField\r\n                    type='text'\r\n                    placeholder='Username'\r\n                    value={this.state.username ? this.state.username :''}\r\n                    onChange={ (val) => this.setInputValue('username', val)}\r\n                    />\r\n                <InputField\r\n                    type='password'\r\n                    placeholder='Password'\r\n                    value={this.state.password ? this.state.password : ''}\r\n                    onChange={ (val) => this.setInputValue('password', val)}\r\n                />\r\n                <div className=\"submitButton\">\r\n                    <button\r\n                        className='btn'\r\n                        onClick={ () =>this.doLogin()}\r\n                    >Login\r\n                    </button>\r\n                    <button\r\n                        className='btn'\r\n                        onClick={ () =>this.doRegister()}\r\n                    >Register\r\n                    </button>\r\n                </div>\r\n\r\n                </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LoginForm;\r\n","import React from 'react';\r\n\r\nexport class Square extends React.Component{\r\n    render(){\r\n        const color_ = this.props.color;\r\n        return (\r\n            <td className='td_square'\r\n                onClick={this.props.handleClick} >\r\n                <div\r\n                    style={{color:color_,\r\n                        backgroundColor: color_,\r\n                        borderRadius: \"50%\",\r\n                        borderColor: color_,\r\n                        height:25}} >\r\n                </div>\r\n            </td>\r\n        )\r\n    }\r\n}\r\nexport default Square;","import React from 'react';\r\nimport { Square } from './Square';\r\n\r\nexport class Board extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            'isWhite':true,\r\n            //\"+\"\" represente carre vide, \"b\" pion noir et \"w\" pion blanc\r\n            'grid':Array(19).fill().map(x => Array(19).fill(\"+\")),\r\n        };\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.ResetGrid = this.ResetGrid.bind(this);\r\n    }\r\n    ResetGrid(){\r\n        let newGrid = Array(19).fill().map(x => Array(19).fill(\"+\"));\r\n        this.setState({'grid':newGrid});\r\n    }\r\n    handleClick(x, y){\r\n        if (this.state.grid[x][y] === '+'){\r\n            const g = this.state.grid;\r\n            g[x][y] = this.state.isWhite === true ? 'w':'b';\r\n            this.setState({'grid':g, 'isWhite':!this.state.isWhite})\r\n\r\n            function checkDir(x_, y_, color){\r\n                let tracked = 0;\r\n                let _x = x;\r\n                let _y = y;\r\n                while (g[_x] !== undefined && g[_x][_y] === color){\r\n                    tracked += 1;\r\n                    _y += y_;\r\n                    _x += x_;\r\n                }\r\n                return tracked;\r\n            }\r\n            const w_horizontal = checkDir(0, 1, 'w') + checkDir(0, -1, 'w') -1;\r\n            const b_horizontal = checkDir(0, 1, 'b') + checkDir(0, -1, 'b') -1;\r\n\r\n            const w_vertical = checkDir(1, 0, 'w') + checkDir(-1, 0, 'w') -1;\r\n            const b_vertical = checkDir(1, 0, 'b') + checkDir(-1, 0, 'b') -1;\r\n\r\n            const w_diag1 = checkDir(1, 1, 'w') + checkDir(-1, -1, 'w') -1;\r\n            const b_diag1 = checkDir(1, 1, 'b') + checkDir(-1, -1, 'b') -1;\r\n\r\n            const w_diag2 = checkDir(1, 1, 'w') + checkDir(-1, -1, 'w') -1;\r\n            const b_diag2 = checkDir(-1, 1, 'b') + checkDir(1, -1, 'b') -1;\r\n\r\n\r\n            if (w_horizontal >=  5 || w_vertical >=  5 || w_diag1 >=  5 || w_diag2 >=  5){\r\n                setTimeout(()=>{alert('white wins')}, 1);\r\n                this.ResetGrid()\r\n            }\r\n\r\n            if (b_horizontal >= 5 || b_vertical >= 5 || b_diag1 >= 5 || b_diag2 >= 5){\r\n                setTimeout(()=>{alert('black wins')}, 1);\r\n                this.ResetGrid()\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    render(){\r\n        const grid = this.state.grid;\r\n\r\n        const board = grid.map((row, i) => { return (\r\n            <tr key={\"row_\"+i}>\r\n                {row.map((col, j) => {\r\n                        const color_ = grid[i][j] === '+' ? '#20555d': grid[i][j] === 'w' ? 'white':'black';\r\n\r\n                        return (\r\n                            <Square handleClick={()=>this.handleClick(i,j)} color={color_} key={i+\"_\"+j} />\r\n                        )\r\n                    }\r\n                )\r\n                }\r\n            </tr>)\r\n        });\r\n\r\n        return (\r\n            <div className='div_grid'>\r\n                <div className='sub_div' >\r\n                    <table className='table_grid' cellSpacing=\"0\" >\r\n                        <tbody>\r\n                        {board}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <br />\r\n                <button onClick={this.ResetGrid}>RESET</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Board;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass ChatInput extends Component {\r\n    static propTypes = {\r\n        onSubmitMessage: PropTypes.func.isRequired,\r\n    };\r\n    state = {\r\n        message: '',\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <form\r\n                action=\".\"\r\n                onSubmit={e => {\r\n                    e.preventDefault();\r\n                    this.props.onSubmitMessage(this.state.message);\r\n                    this.setState({ message: '' })\r\n                }}\r\n            >\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder={'Enter message...'}\r\n                    value={this.state.message}\r\n                    onChange={e => this.setState({ message: e.target.value })}\r\n                />\r\n                <input type=\"submit\" value={'Send'} />\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ChatInput","import React from 'react';\r\n\r\nexport default ({ name, message }) =>\r\n    <p>\r\n        <strong>{name}</strong> <em>{message}</em>\r\n    </p>\r\n\r\n","import React, { Component } from 'react';\r\nimport ChatInput from './ChatInput';\r\nimport ChatMessage from './ChatMessage';\r\nimport UserStore from \"./stores/UserStore\";\r\n\r\nconst URL = \"ws://www.jeremie-henri-test.glitch.me:8080\";\r\n\r\nclass Chat extends Component {\r\n    state = {\r\n        name: UserStore.username,\r\n        messages: [],\r\n    };\r\n\r\n    ws = new WebSocket(URL);\r\n\r\n    componentDidMount() {\r\n        this.ws.onopen = () => {\r\n            // on connecting, do nothing but log it to the console\r\n            console.log('connected')\r\n        };\r\n\r\n        this.ws.onmessage = evt => {\r\n            // on receiving a message, add it to the list of messages\r\n            const message = JSON.parse(evt.data);\r\n            this.addMessage(message)\r\n        };\r\n\r\n        this.ws.onclose = () => {\r\n            console.log('disconnected');\r\n            // automatically try to reconnect on connection loss\r\n            this.setState({\r\n                ws: new WebSocket(URL),\r\n            })\r\n        }\r\n    }\r\n\r\n    addMessage = message =>\r\n        this.setState(state => ({ messages: [message, ...state.messages] }));\r\n\r\n    submitMessage = messageString => {\r\n        // on submitting the ChatInput form, send the message, add it to the list and reset the input\r\n        const message = { name: UserStore.username, message: messageString };\r\n        this.ws.send(JSON.stringify(message));\r\n        this.addMessage(message)\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className='chat'>\r\n                <label htmlFor=\"name\">\r\n                    Chat :\r\n                </label>\r\n                <ChatInput\r\n                    ws={this.ws}\r\n                    onSubmitMessage={messageString => this.submitMessage(messageString)}\r\n                />\r\n                {this.state.messages.map((message, index) =>\r\n                    <ChatMessage\r\n                        key={index}\r\n                        message={message.message}\r\n                        name={message.name}\r\n                    />,\r\n                )}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Chat","import React from 'react';\nimport { observer } from \"mobx-react\";\nimport UserStore from \"./stores/UserStore\";\nimport LoginForm from \"./LoginForm\";\nimport Board from \"./Board\";\nimport './App.css';\nimport Chat from \"./Chat\";\n\nclass App extends React.Component {\n\n    async componentDidMount() {\n        try {\n            let res = await fetch('/isLoggedIn', {\n                method: 'POST',\n                headers: {\n                    'Accept' : 'application/json',\n                    'Content-Type': 'application/json'\n                }\n            });\n\n            let result = await res.json();\n            if (result && result.success){\n                UserStore.loading = false;\n                UserStore.isLoggedIn = true;\n                UserStore.username = result.username;\n            }\n            else {\n                UserStore.loading = false;\n                UserStore.isLoggedIn = false;\n            }\n        }\n        catch (e) {\n            UserStore.loading = false;\n            UserStore.isLoggedIn = false;\n        }\n\n    }\n\n    async doLogout() {\n\n        try {\n            let res = await fetch('/logout', {\n                method: 'post',\n                headers: {\n                    'Accept' : 'application/json',\n                    'Content-Type': 'application/json'\n                }\n            });\n            let result = await  res.json();\n\n            if (result && result.success){\n                UserStore.isLoggedIn = false;\n                UserStore.username = '';\n            }\n        }\n        catch (e) {\n            console.log(e)\n        }\n\n    }\n\n  render() {\n        if (UserStore.loading){\n            return (\n                <div className='app'>\n                    <div className='container'>\n                        Chargement ....\n                    </div>\n                </div>\n            );\n        }\n        else {\n            if (UserStore.isLoggedIn){\n                return (\n                    <div className='app'>\n                        <Chat/>\n                        <div className='container'>\n                            Welcome {UserStore.username}\n                            <div className=\"submitButton\">\n                                <button\n                                    className='btn'\n                                    onClick={ () =>this.doLogout()}\n                                >LogOut\n                                </button>\n                                <Board></Board>\n                            </div>\n                        </div>\n                    </div>\n                );\n            }\n            return (\n                <div className=\"app\">\n                    <div className='container'>\n                        <h1>Projet React L3</h1>\n\n                        <LoginForm />\n\n                    </div>\n                </div>\n            );\n        }\n    }\n}\n\nexport default observer(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}